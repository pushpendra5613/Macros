class SGTree{

  vector<int> seg;
  public :

        SGTree(int n) {
           seg.resize(4*n+1);
        }

        void build(int idx,int lo,int hi,vector<int> &v) {
             if(lo == hi) {
                seg[idx]=v[lo];
                return ;
             }
             int mid=(lo+hi) >> 1;
             build(idx*2+1,lo,mid,v);
             build(idx*2+2,mid+1,hi,v);

             seg[idx]=min(seg[2*idx+1],seg[2*idx+2]);
        }

        int solve(int idx,int lo,int hi,int l,int r) {
          if(hi < l || r < lo) {
            return INT_MAX;
          }
          if(lo >=l && hi<=r) {
            return seg[idx];
          }

          int mid=(lo+hi) >> 1;

          int left=solve(2*idx+1,lo,mid,l,r);
          int right=solve(2*idx+2,mid+1,hi,l,r);

          return min(left,right);
        }

        void Update(int idx,int lo,int hi,int i,int val) {
           if(lo==hi) {
            seg[idx]=val;
            return ;
           }
           int mid=(lo+hi) >> 1;

           if(i<=mid) Update(idx*2+1,lo,mid,i,val);
           else Update(idx*2+2,mid+1,hi,i,val);

           seg[idx]=min(seg[2*idx+1],seg[2*idx+2]);
        }
};
