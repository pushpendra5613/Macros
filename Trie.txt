struct Node{
    Node* links[2];
    
    bool containsKey(int bit){
        return (links[bit]!=NULL);
    }
     void put(int bit, Node* node){
         links[bit]=node;
     }
    Node* get(int bit){
        return links[bit];
    }
};
class Trie{
private:
    Node* root;
public: 
    Trie(){
        root =new Node();
    }
    void insert(int num){
        Node* node=root;
        for(int i=31; i>=0;i--){
            int bit = (num>>i) & 1;
            if(!node->containsKey(bit)){
                node->put(bit, new Node());
            }
            node= node->get(bit);
        }
    }
    int getMaxXorOf(int num){
        Node* node=root;
        int maxXor=0;
        
        for(int i=31;i>=0;i--){
            int bit= (num>>i) & 1;
            if(!node->containsKey(1-bit)){
                node = node->get(bit);
            }
            else{
                maxXor = maxXor | (1<<i);
                node = node->get(1-bit);
            }
        }
       return maxXor; 
    }
};



struct Node {
    Node* links[26];
    bool flag=false;
    
    bool containskey (char ch) {
        return links[ch-'a'] !=NULL;
    }
    
    void put(char ch,Node* node) {
        links[ch-'a']=node;
    }
    
    Node* get(char ch) {
        return links[ch-'a'];
    }
    
    void setEnd() {
       flag=true;
    }
    
    bool isEnd(){
        return flag;
    }
};

class Trie {
    private : Node* root;
public:
    
    Trie() {
        root=new Node();
    }
    
    void insert(string word) {
        Node* node=root;
        
        for(int i=0;i<word.size();i++) {
            if(!node->containskey(word[i])) {
                Node* newnode=new Node();
                node->put(word[i],newnode);
            }
            
           node=node->get(word[i]);
        }
        
        node->setEnd();
    }
    
    bool search(string word) {
        Node* node=root;
        
        for(int i=0;i<word.size();i++) {
            if(!node->containskey(word[i])) {
                return false;
            }
            node=node->get(word[i]);
        }
        
        return node->isEnd();
    }
    
    bool startsWith(string word) {
         Node* node=root;
        
        for(int i=0;i<word.size();i++) {
            if(!node->containskey(word[i])) {
                return false;
            }
            node=node->get(word[i]);
        }
        
        return true;
    }
};
